using LinearAlgebra, Pkg, Plots, BenchmarkTools, CUDA
using Qutee

"""
    goodness(standeig,testeig,m)

    Compares the eigenvectors associated with the m largest eigenvalues.
    Compares how many eigenvectors (testeig) generated by a certain method match eigenvectors (standeig) from the 
    original matrix within a certain accuracy.
    Returns an integer, representing the number of eigenvalues found.
"""

function goodness(standeig, testeig, m)
    vals = zeros(ComplexF64, 1, m)  # initializes array that will hold accuracy of each eigen pair
    count = 0
    for i in 1:m  # iterates through all eigen pairs
        # compares the last (largest) eigenvalues from standeig and testeig. The closer it is to 1, the more similar the pair is.
        vals[1, i] = standeig[:, end-i+1]' * testeig[:, end-i+1]
        if norm(vals[1, i]) > 0.99  # Change this number to whatever percent similarity/accuracy you desire
            count += 1
        end
    end
    return count
end


# ind is for the x axis (number of iterations m) 
ind1 = zeros((2^1)^2,1)
for i in 1:(2^1)^2
	ind1[i,1] = i
end
ind2 = zeros((2^2)^2,1)
for i in 1:(2^2)^2
	ind2[i,1] = i
end
ind3 = zeros((2^3)^2,1)
for i in 1:(2^3)^2
	ind3[i,1] = i
end
ind4 = zeros((2^4)^2,1)
for i in 1:(2^4)^2
	ind4[i,1] = i
end

# Values I got from my tests
comp1 = [0.0, 0.2, 0.8, 3.2]
comp2 = [0.0, 0.0, 0.0, 0.0, 0.3, 0.7, 0.9, 1.0, 1.0, 1.4, 1.6, 2.0, 2.9, 3.5, 5.5, 10.2]
comp3 = [0.0, 0.0, 0.0, 0.0, 0.1, 0.8, 0.9, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.1, 1.2, 1.2, 1.2, 1.3, 1.4, 1.4, 1.4, 1.5, 1.6, 1.7, 2.1, 2.3, 2.1, 2.4, 2.6, 2.4, 3.1, 3.0, 3.3, 3.5, 4.2, 3.4, 4.8, 4.9, 5.1, 4.9, 5.8, 5.9, 5.7, 6.4, 7.1, 6.4, 8.5, 7.7, 9.1, 8.8, 8.0, 9.8, 9.5, 11.0, 10.1, 10.6, 12.3, 12.4, 14.8, 14.9, 22.9, 34.0]
comp4 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.2, 1.2, 1.3, 1.4, 1.5, 1.5, 1.7, 1.9, 2.0, 2.0, 1.9, 2.2, 2.2, 2.8, 2.4, 2.9, 2.8, 3.0, 2.7, 2.5, 2.7, 2.3, 2.5, 2.8, 2.7, 2.7, 3.8, 3.3, 2.9, 2.7, 2.9, 3.1, 3.0, 2.6, 3.3, 3.0, 3.5, 3.0, 3.6, 4.1, 4.0, 4.3, 3.9, 5.1, 5.1, 4.7, 4.8, 5.4, 5.3, 5.8, 5.8, 5.6, 5.5, 5.6, 5.5, 6.3, 6.1, 5.1, 6.7, 7.8, 7.3, 7.6, 7.0, 8.5, 8.3, 7.6, 7.8, 7.6, 8.1, 8.0, 7.5, 7.9, 7.5, 7.4, 7.4, 8.6, 9.7, 8.8, 10.0, 11.3, 10.7, 11.0, 11.9, 12.2, 12.1, 12.7, 11.7, 12.4, 12.9, 12.8, 13.0, 13.2, 14.1, 12.4, 12.2, 12.2, 12.2, 11.0, 12.0, 12.1, 11.9, 13.1, 14.0, 15.3, 16.4, 15.0, 14.8, 15.7, 14.7, 15.4, 16.2, 13.0, 15.5, 15.3, 16.4, 17.4, 19.0, 17.2, 14.8, 16.0, 18.0, 17.5, 17.0, 15.9, 16.3, 19.2, 16.3, 16.9, 18.2, 17.6, 17.3, 17.4, 18.9, 20.2, 21.2, 21.4, 22.5, 23.0, 21.0, 22.0, 24.3, 22.6, 21.4, 24.6, 24.3, 21.0, 23.2, 26.1, 23.7, 26.8, 25.2, 22.9, 25.4, 25.1, 25.7, 26.5, 27.9, 25.2, 28.0, 27.8, 29.0, 31.6, 31.2, 30.5, 30.7, 30.8, 31.0, 30.9, 32.8, 30.7, 32.5, 35.4, 32.5, 31.8, 34.5, 37.4, 34.7, 37.6, 33.8, 35.8, 36.0, 37.0, 39.4, 39.3, 38.9, 39.8, 37.9, 40.8, 41.5, 43.4, 44.3, 41.3, 42.1, 45.4, 44.2, 42.0, 46.1, 45.6, 51.9, 51.8, 56.8, 53.9, 47.9, 50.5, 57.3, 57.8, 54.5, 55.7, 60.7, 60.6, 61.1, 59.8, 93.4, 131.4]
plot(ind4[1:100,1],comp4[1:100,1],label="n=4")
plot!(ind3[1:50,1],comp3[1:50,1],label="n=3")
plot!(ind2,comp2,label="n=2")
plot!(ind1,comp1,label="n=1")